{{>partial_header}}
package {{packageName}}

import (
	"encoding/json"
	"time"
)

// PtrBool is a helper routine that returns a pointer to given boolean value.
func PtrBool(v bool) *bool { return &v }

// PtrInt is a helper routine that returns a pointer to given integer value.
func PtrInt(v int) *int { return &v }

// PtrInt32 is a helper routine that returns a pointer to given integer value.
func PtrInt32(v int32) *int32 { return &v }

// PtrInt64 is a helper routine that returns a pointer to given integer value.
func PtrInt64(v int64) *int64 { return &v }

// PtrFloat32 is a helper routine that returns a pointer to given float value.
func PtrFloat32(v float32) *float32 { return &v }

// PtrFloat64 is a helper routine that returns a pointer to given float value.
func PtrFloat64(v float64) *float64 { return &v }

// PtrString is a helper routine that returns a pointer to given string value.
func PtrString(v string) *string { return &v }

// PtrTime is helper routine that returns a pointer to given Time value.
func PtrTime(v time.Time) *time.Time { return &v }

type NilableBool struct {
	value *bool
	isSet bool
}

func (v NilableBool) Get() *bool {
	return v.value
}

func (v *NilableBool) Set(val *bool) {
	v.value = val
	v.isSet = true
}

func (v NilableBool) IsSet() bool {
	return v.isSet
}

func (v *NilableBool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNilableBool(val *bool) *NilableBool {
	return &NilableBool{value: val, isSet: true}
}

func (v NilableBool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NilableBool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type NilableInt struct {
	value *int
	isSet bool
}

func (v NilableInt) Get() *int {
	return v.value
}

func (v *NilableInt) Set(val *int) {
	v.value = val
	v.isSet = true
}

func (v NilableInt) IsSet() bool {
	return v.isSet
}

func (v *NilableInt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNilableInt(val *int) *NilableInt {
	return &NilableInt{value: val, isSet: true}
}

func (v NilableInt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NilableInt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type NilableInt32 struct {
	value *int32
	isSet bool
}

func (v NilableInt32) Get() *int32 {
	return v.value
}

func (v *NilableInt32) Set(val *int32) {
	v.value = val
	v.isSet = true
}

func (v NilableInt32) IsSet() bool {
	return v.isSet
}

func (v *NilableInt32) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNilableInt32(val *int32) *NilableInt32 {
	return &NilableInt32{value: val, isSet: true}
}

func (v NilableInt32) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NilableInt32) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type NilableInt64 struct {
	value *int64
	isSet bool
}

func (v NilableInt64) Get() *int64 {
	return v.value
}

func (v *NilableInt64) Set(val *int64) {
	v.value = val
	v.isSet = true
}

func (v NilableInt64) IsSet() bool {
	return v.isSet
}

func (v *NilableInt64) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNilableInt64(val *int64) *NilableInt64 {
	return &NilableInt64{value: val, isSet: true}
}

func (v NilableInt64) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NilableInt64) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type NilableFloat32 struct {
	value *float32
	isSet bool
}

func (v NilableFloat32) Get() *float32 {
	return v.value
}

func (v *NilableFloat32) Set(val *float32) {
	v.value = val
	v.isSet = true
}

func (v NilableFloat32) IsSet() bool {
	return v.isSet
}

func (v *NilableFloat32) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNilableFloat32(val *float32) *NilableFloat32 {
	return &NilableFloat32{value: val, isSet: true}
}

func (v NilableFloat32) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NilableFloat32) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type NilableFloat64 struct {
	value *float64
	isSet bool
}

func (v NilableFloat64) Get() *float64 {
	return v.value
}

func (v *NilableFloat64) Set(val *float64) {
	v.value = val
	v.isSet = true
}

func (v NilableFloat64) IsSet() bool {
	return v.isSet
}

func (v *NilableFloat64) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNilableFloat64(val *float64) *NilableFloat64 {
	return &NilableFloat64{value: val, isSet: true}
}

func (v NilableFloat64) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NilableFloat64) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type NilableString struct {
	value *string
	isSet bool
}

func (v NilableString) Get() *string {
	return v.value
}

func (v *NilableString) Set(val *string) {
	v.value = val
	v.isSet = true
}

func (v NilableString) IsSet() bool {
	return v.isSet
}

func (v *NilableString) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNilableString(val *string) *NilableString {
	return &NilableString{value: val, isSet: true}
}

func (v NilableString) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NilableString) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type NilableTime struct {
	value *time.Time
	isSet bool
}

func (v NilableTime) Get() *time.Time {
	return v.value
}

func (v *NilableTime) Set(val *time.Time) {
	v.value = val
	v.isSet = true
}

func (v NilableTime) IsSet() bool {
	return v.isSet
}

func (v *NilableTime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNilableTime(val *time.Time) *NilableTime {
	return &NilableTime{value: val, isSet: true}
}

func (v NilableTime) MarshalJSON() ([]byte, error) {
	return v.value.MarshalJSON()
}

func (v *NilableTime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
