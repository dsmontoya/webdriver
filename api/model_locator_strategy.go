/*
Selenium WebDriver

[Selenium WebDriver](https://www.w3.org/TR/webdriver) API specification

API version: 1.0.0
Contact: support@aerokube.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// LocatorStrategy Locator strategy
type LocatorStrategy string

// List of LocatorStrategy
const (
	LOCATORSTRATEGY_CSS_SELECTOR LocatorStrategy = "css selector"
	LOCATORSTRATEGY_LINK_TEXT LocatorStrategy = "link text"
	LOCATORSTRATEGY_PARTIAL_LINK_TEXT LocatorStrategy = "partial link text"
	LOCATORSTRATEGY_TAG_NAME LocatorStrategy = "tag name"
	LOCATORSTRATEGY_XPATH LocatorStrategy = "xpath"
)

// All allowed values of LocatorStrategy enum
var AllowedLocatorStrategyEnumValues = []LocatorStrategy{
	"css selector",
	"link text",
	"partial link text",
	"tag name",
	"xpath",
}

func (v *LocatorStrategy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LocatorStrategy(value)
	for _, existing := range AllowedLocatorStrategyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LocatorStrategy", value)
}

// NewLocatorStrategyFromValue returns a pointer to a valid LocatorStrategy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLocatorStrategyFromValue(v string) (*LocatorStrategy, error) {
	ev := LocatorStrategy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LocatorStrategy: valid values are %v", v, AllowedLocatorStrategyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LocatorStrategy) IsValid() bool {
	for _, existing := range AllowedLocatorStrategyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LocatorStrategy value
func (v LocatorStrategy) Ptr() *LocatorStrategy {
	return &v
}

type NullableLocatorStrategy struct {
	value *LocatorStrategy
	isSet bool
}

func (v NullableLocatorStrategy) Get() *LocatorStrategy {
	return v.value
}

func (v *NullableLocatorStrategy) Set(val *LocatorStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableLocatorStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableLocatorStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocatorStrategy(val *LocatorStrategy) *NullableLocatorStrategy {
	return &NullableLocatorStrategy{value: val, isSet: true}
}

func (v NullableLocatorStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocatorStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

