/*
Selenium WebDriver

[Selenium WebDriver](https://www.w3.org/TR/webdriver) API specification

API version: 1.0.0
Contact: support@aerokube.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// StringOrigin the model 'StringOrigin'
type StringOrigin string

// List of StringOrigin
const (
	STRINGORIGIN_VIEWPORT StringOrigin = "viewport"
	STRINGORIGIN_POINTER StringOrigin = "pointer"
)

// All allowed values of StringOrigin enum
var AllowedStringOriginEnumValues = []StringOrigin{
	"viewport",
	"pointer",
}

func (v *StringOrigin) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StringOrigin(value)
	for _, existing := range AllowedStringOriginEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StringOrigin", value)
}

// NewStringOriginFromValue returns a pointer to a valid StringOrigin
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStringOriginFromValue(v string) (*StringOrigin, error) {
	ev := StringOrigin(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StringOrigin: valid values are %v", v, AllowedStringOriginEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StringOrigin) IsValid() bool {
	for _, existing := range AllowedStringOriginEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StringOrigin value
func (v StringOrigin) Ptr() *StringOrigin {
	return &v
}

type NullableStringOrigin struct {
	value *StringOrigin
	isSet bool
}

func (v NullableStringOrigin) Get() *StringOrigin {
	return v.value
}

func (v *NullableStringOrigin) Set(val *StringOrigin) {
	v.value = val
	v.isSet = true
}

func (v NullableStringOrigin) IsSet() bool {
	return v.isSet
}

func (v *NullableStringOrigin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStringOrigin(val *StringOrigin) *NullableStringOrigin {
	return &NullableStringOrigin{value: val, isSet: true}
}

func (v NullableStringOrigin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStringOrigin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

