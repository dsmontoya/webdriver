/*
Selenium WebDriver

[Selenium WebDriver](https://www.w3.org/TR/webdriver) API specification

API version: 1.0.0
Contact: support@aerokube.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// ActionOrigin - struct for ActionOrigin
type ActionOrigin struct {
	StringOrigin *StringOrigin
	WebElementOrigin *WebElementOrigin
}

// StringOriginAsActionOrigin is a convenience function that returns StringOrigin wrapped in ActionOrigin
func StringOriginAsActionOrigin(v *StringOrigin) ActionOrigin {
	return ActionOrigin{
		StringOrigin: v,
	}
}

// WebElementOriginAsActionOrigin is a convenience function that returns WebElementOrigin wrapped in ActionOrigin
func WebElementOriginAsActionOrigin(v *WebElementOrigin) ActionOrigin {
	return ActionOrigin{
		WebElementOrigin: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ActionOrigin) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into StringOrigin
	err = newStrictDecoder(data).Decode(&dst.StringOrigin)
	if err == nil {
		jsonStringOrigin, _ := json.Marshal(dst.StringOrigin)
		if string(jsonStringOrigin) == "{}" { // empty struct
			dst.StringOrigin = nil
		} else {
			match++
		}
	} else {
		dst.StringOrigin = nil
	}

	// try to unmarshal data into WebElementOrigin
	err = newStrictDecoder(data).Decode(&dst.WebElementOrigin)
	if err == nil {
		jsonWebElementOrigin, _ := json.Marshal(dst.WebElementOrigin)
		if string(jsonWebElementOrigin) == "{}" { // empty struct
			dst.WebElementOrigin = nil
		} else {
			match++
		}
	} else {
		dst.WebElementOrigin = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.StringOrigin = nil
		dst.WebElementOrigin = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(ActionOrigin)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(ActionOrigin)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ActionOrigin) MarshalJSON() ([]byte, error) {
	if src.StringOrigin != nil {
		return json.Marshal(&src.StringOrigin)
	}

	if src.WebElementOrigin != nil {
		return json.Marshal(&src.WebElementOrigin)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ActionOrigin) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.StringOrigin != nil {
		return obj.StringOrigin
	}

	if obj.WebElementOrigin != nil {
		return obj.WebElementOrigin
	}

	// all schemas are nil
	return nil
}

type NilableActionOrigin struct {
	value *ActionOrigin
	isSet bool
}

func (v NilableActionOrigin) Get() *ActionOrigin {
	return v.value
}

func (v *NilableActionOrigin) Set(val *ActionOrigin) {
	v.value = val
	v.isSet = true
}

func (v NilableActionOrigin) IsSet() bool {
	return v.isSet
}

func (v *NilableActionOrigin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNilableActionOrigin(val *ActionOrigin) *NilableActionOrigin {
	return &NilableActionOrigin{value: val, isSet: true}
}

func (v NilableActionOrigin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NilableActionOrigin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


