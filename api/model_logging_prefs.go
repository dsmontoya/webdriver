/*
Selenium WebDriver

[Selenium WebDriver](https://www.w3.org/TR/webdriver) API specification

API version: 1.0.0
Contact: support@aerokube.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// LoggingPrefs struct for LoggingPrefs
type LoggingPrefs struct {
	Browser *LogLevel `json:"browser,omitempty"`
	Client *LogLevel `json:"client,omitempty"`
	Driver *LogLevel `json:"driver,omitempty"`
	Performance *LogLevel `json:"performance,omitempty"`
	Profiler *LogLevel `json:"profiler,omitempty"`
	Server *LogLevel `json:"server,omitempty"`
}

// NewLoggingPrefs instantiates a new LoggingPrefs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoggingPrefs() *LoggingPrefs {
	this := LoggingPrefs{}
	return &this
}

// NewLoggingPrefsWithDefaults instantiates a new LoggingPrefs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoggingPrefsWithDefaults() *LoggingPrefs {
	this := LoggingPrefs{}
	return &this
}

// GetBrowser returns the Browser field value if set, zero value otherwise.
func (o *LoggingPrefs) GetBrowser() LogLevel {
	if o == nil || o.Browser == nil {
		var ret LogLevel
		return ret
	}
	return *o.Browser
}

// GetBrowserOk returns a tuple with the Browser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoggingPrefs) GetBrowserOk() (*LogLevel, bool) {
	if o == nil || o.Browser == nil {
		return nil, false
	}
	return o.Browser, true
}

// HasBrowser returns a boolean if a field has been set.
func (o *LoggingPrefs) HasBrowser() bool {
	if o != nil && o.Browser != nil {
		return true
	}

	return false
}

// SetBrowser gets a reference to the given LogLevel and assigns it to the Browser field.
func (o *LoggingPrefs) SetBrowser(v LogLevel) {
	o.Browser = &v
}

// GetClient returns the Client field value if set, zero value otherwise.
func (o *LoggingPrefs) GetClient() LogLevel {
	if o == nil || o.Client == nil {
		var ret LogLevel
		return ret
	}
	return *o.Client
}

// GetClientOk returns a tuple with the Client field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoggingPrefs) GetClientOk() (*LogLevel, bool) {
	if o == nil || o.Client == nil {
		return nil, false
	}
	return o.Client, true
}

// HasClient returns a boolean if a field has been set.
func (o *LoggingPrefs) HasClient() bool {
	if o != nil && o.Client != nil {
		return true
	}

	return false
}

// SetClient gets a reference to the given LogLevel and assigns it to the Client field.
func (o *LoggingPrefs) SetClient(v LogLevel) {
	o.Client = &v
}

// GetDriver returns the Driver field value if set, zero value otherwise.
func (o *LoggingPrefs) GetDriver() LogLevel {
	if o == nil || o.Driver == nil {
		var ret LogLevel
		return ret
	}
	return *o.Driver
}

// GetDriverOk returns a tuple with the Driver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoggingPrefs) GetDriverOk() (*LogLevel, bool) {
	if o == nil || o.Driver == nil {
		return nil, false
	}
	return o.Driver, true
}

// HasDriver returns a boolean if a field has been set.
func (o *LoggingPrefs) HasDriver() bool {
	if o != nil && o.Driver != nil {
		return true
	}

	return false
}

// SetDriver gets a reference to the given LogLevel and assigns it to the Driver field.
func (o *LoggingPrefs) SetDriver(v LogLevel) {
	o.Driver = &v
}

// GetPerformance returns the Performance field value if set, zero value otherwise.
func (o *LoggingPrefs) GetPerformance() LogLevel {
	if o == nil || o.Performance == nil {
		var ret LogLevel
		return ret
	}
	return *o.Performance
}

// GetPerformanceOk returns a tuple with the Performance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoggingPrefs) GetPerformanceOk() (*LogLevel, bool) {
	if o == nil || o.Performance == nil {
		return nil, false
	}
	return o.Performance, true
}

// HasPerformance returns a boolean if a field has been set.
func (o *LoggingPrefs) HasPerformance() bool {
	if o != nil && o.Performance != nil {
		return true
	}

	return false
}

// SetPerformance gets a reference to the given LogLevel and assigns it to the Performance field.
func (o *LoggingPrefs) SetPerformance(v LogLevel) {
	o.Performance = &v
}

// GetProfiler returns the Profiler field value if set, zero value otherwise.
func (o *LoggingPrefs) GetProfiler() LogLevel {
	if o == nil || o.Profiler == nil {
		var ret LogLevel
		return ret
	}
	return *o.Profiler
}

// GetProfilerOk returns a tuple with the Profiler field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoggingPrefs) GetProfilerOk() (*LogLevel, bool) {
	if o == nil || o.Profiler == nil {
		return nil, false
	}
	return o.Profiler, true
}

// HasProfiler returns a boolean if a field has been set.
func (o *LoggingPrefs) HasProfiler() bool {
	if o != nil && o.Profiler != nil {
		return true
	}

	return false
}

// SetProfiler gets a reference to the given LogLevel and assigns it to the Profiler field.
func (o *LoggingPrefs) SetProfiler(v LogLevel) {
	o.Profiler = &v
}

// GetServer returns the Server field value if set, zero value otherwise.
func (o *LoggingPrefs) GetServer() LogLevel {
	if o == nil || o.Server == nil {
		var ret LogLevel
		return ret
	}
	return *o.Server
}

// GetServerOk returns a tuple with the Server field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoggingPrefs) GetServerOk() (*LogLevel, bool) {
	if o == nil || o.Server == nil {
		return nil, false
	}
	return o.Server, true
}

// HasServer returns a boolean if a field has been set.
func (o *LoggingPrefs) HasServer() bool {
	if o != nil && o.Server != nil {
		return true
	}

	return false
}

// SetServer gets a reference to the given LogLevel and assigns it to the Server field.
func (o *LoggingPrefs) SetServer(v LogLevel) {
	o.Server = &v
}

func (o LoggingPrefs) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Browser != nil {
		toSerialize["browser"] = o.Browser
	}
	if o.Client != nil {
		toSerialize["client"] = o.Client
	}
	if o.Driver != nil {
		toSerialize["driver"] = o.Driver
	}
	if o.Performance != nil {
		toSerialize["performance"] = o.Performance
	}
	if o.Profiler != nil {
		toSerialize["profiler"] = o.Profiler
	}
	if o.Server != nil {
		toSerialize["server"] = o.Server
	}
	return json.Marshal(toSerialize)
}

type NilableLoggingPrefs struct {
	value *LoggingPrefs
	isSet bool
}

func (v NilableLoggingPrefs) Get() *LoggingPrefs {
	return v.value
}

func (v *NilableLoggingPrefs) Set(val *LoggingPrefs) {
	v.value = val
	v.isSet = true
}

func (v NilableLoggingPrefs) IsSet() bool {
	return v.isSet
}

func (v *NilableLoggingPrefs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNilableLoggingPrefs(val *LoggingPrefs) *NilableLoggingPrefs {
	return &NilableLoggingPrefs{value: val, isSet: true}
}

func (v NilableLoggingPrefs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NilableLoggingPrefs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


