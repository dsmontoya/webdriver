/*
Selenium WebDriver

[Selenium WebDriver](https://www.w3.org/TR/webdriver) API specification

API version: 1.0.0
Contact: support@aerokube.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// Cookie struct for Cookie
type Cookie struct {
	Name string `json:"name"`
	Value string `json:"value"`
	Path string `json:"path"`
	Domain string `json:"domain"`
	Secure bool `json:"secure"`
	HttpOnly bool `json:"httpOnly"`
	Expiry *int64 `json:"expiry,omitempty"`
	SameSite string `json:"sameSite"`
}

// NewCookie instantiates a new Cookie object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCookie(name string, value string, path string, domain string, secure bool, httpOnly bool, sameSite string) *Cookie {
	this := Cookie{}
	this.Name = name
	this.Value = value
	this.Path = path
	this.Domain = domain
	this.Secure = secure
	this.HttpOnly = httpOnly
	this.SameSite = sameSite
	return &this
}

// NewCookieWithDefaults instantiates a new Cookie object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCookieWithDefaults() *Cookie {
	this := Cookie{}
	return &this
}

// GetName returns the Name field value
func (o *Cookie) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Cookie) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Cookie) SetName(v string) {
	o.Name = v
}

// GetValue returns the Value field value
func (o *Cookie) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *Cookie) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *Cookie) SetValue(v string) {
	o.Value = v
}

// GetPath returns the Path field value
func (o *Cookie) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *Cookie) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *Cookie) SetPath(v string) {
	o.Path = v
}

// GetDomain returns the Domain field value
func (o *Cookie) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *Cookie) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *Cookie) SetDomain(v string) {
	o.Domain = v
}

// GetSecure returns the Secure field value
func (o *Cookie) GetSecure() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Secure
}

// GetSecureOk returns a tuple with the Secure field value
// and a boolean to check if the value has been set.
func (o *Cookie) GetSecureOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Secure, true
}

// SetSecure sets field value
func (o *Cookie) SetSecure(v bool) {
	o.Secure = v
}

// GetHttpOnly returns the HttpOnly field value
func (o *Cookie) GetHttpOnly() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HttpOnly
}

// GetHttpOnlyOk returns a tuple with the HttpOnly field value
// and a boolean to check if the value has been set.
func (o *Cookie) GetHttpOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HttpOnly, true
}

// SetHttpOnly sets field value
func (o *Cookie) SetHttpOnly(v bool) {
	o.HttpOnly = v
}

// GetExpiry returns the Expiry field value if set, zero value otherwise.
func (o *Cookie) GetExpiry() int64 {
	if o == nil || o.Expiry == nil {
		var ret int64
		return ret
	}
	return *o.Expiry
}

// GetExpiryOk returns a tuple with the Expiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cookie) GetExpiryOk() (*int64, bool) {
	if o == nil || o.Expiry == nil {
		return nil, false
	}
	return o.Expiry, true
}

// HasExpiry returns a boolean if a field has been set.
func (o *Cookie) HasExpiry() bool {
	if o != nil && o.Expiry != nil {
		return true
	}

	return false
}

// SetExpiry gets a reference to the given int64 and assigns it to the Expiry field.
func (o *Cookie) SetExpiry(v int64) {
	o.Expiry = &v
}

// GetSameSite returns the SameSite field value
func (o *Cookie) GetSameSite() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SameSite
}

// GetSameSiteOk returns a tuple with the SameSite field value
// and a boolean to check if the value has been set.
func (o *Cookie) GetSameSiteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SameSite, true
}

// SetSameSite sets field value
func (o *Cookie) SetSameSite(v string) {
	o.SameSite = v
}

func (o Cookie) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["path"] = o.Path
	}
	if true {
		toSerialize["domain"] = o.Domain
	}
	if true {
		toSerialize["secure"] = o.Secure
	}
	if true {
		toSerialize["httpOnly"] = o.HttpOnly
	}
	if o.Expiry != nil {
		toSerialize["expiry"] = o.Expiry
	}
	if true {
		toSerialize["sameSite"] = o.SameSite
	}
	return json.Marshal(toSerialize)
}

type NilableCookie struct {
	value *Cookie
	isSet bool
}

func (v NilableCookie) Get() *Cookie {
	return v.value
}

func (v *NilableCookie) Set(val *Cookie) {
	v.value = val
	v.isSet = true
}

func (v NilableCookie) IsSet() bool {
	return v.isSet
}

func (v *NilableCookie) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNilableCookie(val *Cookie) *NilableCookie {
	return &NilableCookie{value: val, isSet: true}
}

func (v NilableCookie) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NilableCookie) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


