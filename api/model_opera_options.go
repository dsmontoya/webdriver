/*
Selenium WebDriver

[Selenium WebDriver](https://www.w3.org/TR/webdriver) API specification

API version: 1.0.0
Contact: support@aerokube.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// OperaOptions struct for OperaOptions
type OperaOptions struct {
	Args []string `json:"args,omitempty"`
	Binary *string `json:"binary,omitempty"`
	Extensions []string `json:"extensions,omitempty"`
}

// NewOperaOptions instantiates a new OperaOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOperaOptions() *OperaOptions {
	this := OperaOptions{}
	return &this
}

// NewOperaOptionsWithDefaults instantiates a new OperaOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOperaOptionsWithDefaults() *OperaOptions {
	this := OperaOptions{}
	return &this
}

// GetArgs returns the Args field value if set, zero value otherwise.
func (o *OperaOptions) GetArgs() []string {
	if o == nil || o.Args == nil {
		var ret []string
		return ret
	}
	return o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperaOptions) GetArgsOk() ([]string, bool) {
	if o == nil || o.Args == nil {
		return nil, false
	}
	return o.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *OperaOptions) HasArgs() bool {
	if o != nil && o.Args != nil {
		return true
	}

	return false
}

// SetArgs gets a reference to the given []string and assigns it to the Args field.
func (o *OperaOptions) SetArgs(v []string) {
	o.Args = v
}

// GetBinary returns the Binary field value if set, zero value otherwise.
func (o *OperaOptions) GetBinary() string {
	if o == nil || o.Binary == nil {
		var ret string
		return ret
	}
	return *o.Binary
}

// GetBinaryOk returns a tuple with the Binary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperaOptions) GetBinaryOk() (*string, bool) {
	if o == nil || o.Binary == nil {
		return nil, false
	}
	return o.Binary, true
}

// HasBinary returns a boolean if a field has been set.
func (o *OperaOptions) HasBinary() bool {
	if o != nil && o.Binary != nil {
		return true
	}

	return false
}

// SetBinary gets a reference to the given string and assigns it to the Binary field.
func (o *OperaOptions) SetBinary(v string) {
	o.Binary = &v
}

// GetExtensions returns the Extensions field value if set, zero value otherwise.
func (o *OperaOptions) GetExtensions() []string {
	if o == nil || o.Extensions == nil {
		var ret []string
		return ret
	}
	return o.Extensions
}

// GetExtensionsOk returns a tuple with the Extensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperaOptions) GetExtensionsOk() ([]string, bool) {
	if o == nil || o.Extensions == nil {
		return nil, false
	}
	return o.Extensions, true
}

// HasExtensions returns a boolean if a field has been set.
func (o *OperaOptions) HasExtensions() bool {
	if o != nil && o.Extensions != nil {
		return true
	}

	return false
}

// SetExtensions gets a reference to the given []string and assigns it to the Extensions field.
func (o *OperaOptions) SetExtensions(v []string) {
	o.Extensions = v
}

func (o OperaOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Args != nil {
		toSerialize["args"] = o.Args
	}
	if o.Binary != nil {
		toSerialize["binary"] = o.Binary
	}
	if o.Extensions != nil {
		toSerialize["extensions"] = o.Extensions
	}
	return json.Marshal(toSerialize)
}

type NilableOperaOptions struct {
	value *OperaOptions
	isSet bool
}

func (v NilableOperaOptions) Get() *OperaOptions {
	return v.value
}

func (v *NilableOperaOptions) Set(val *OperaOptions) {
	v.value = val
	v.isSet = true
}

func (v NilableOperaOptions) IsSet() bool {
	return v.isSet
}

func (v *NilableOperaOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNilableOperaOptions(val *OperaOptions) *NilableOperaOptions {
	return &NilableOperaOptions{value: val, isSet: true}
}

func (v NilableOperaOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NilableOperaOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


