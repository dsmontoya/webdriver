/*
Selenium WebDriver

[Selenium WebDriver](https://www.w3.org/TR/webdriver) API specification

API version: 1.0.0
Contact: support@aerokube.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// PointerAction struct for PointerAction
type PointerAction struct {
	Type *string `json:"type,omitempty"`
	// Possible values: `0` - left button, `1` - middle button, `2` - right button
	Button *int32 `json:"button,omitempty"`
	Pressed *int32 `json:"pressed,omitempty"`
	X *int32 `json:"x,omitempty"`
	Y *int32 `json:"y,omitempty"`
	Width *int32 `json:"width,omitempty"`
	Height *int32 `json:"height,omitempty"`
	Pressure *int32 `json:"pressure,omitempty"`
	TangentialPressure *int32 `json:"tangentialPressure,omitempty"`
	TiltX *int32 `json:"tiltX,omitempty"`
	TiltY *int32 `json:"tiltY,omitempty"`
	Twist *int32 `json:"twist,omitempty"`
	AltitudeAngle *float32 `json:"altitudeAngle,omitempty"`
	AsimuthAngle *float32 `json:"asimuthAngle,omitempty"`
	Origin *ActionOrigin `json:"origin,omitempty"`
}

// NewPointerAction instantiates a new PointerAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPointerAction() *PointerAction {
	this := PointerAction{}
	var type_ string = "pause"
	this.Type = &type_
	return &this
}

// NewPointerActionWithDefaults instantiates a new PointerAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPointerActionWithDefaults() *PointerAction {
	this := PointerAction{}
	var type_ string = "pause"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PointerAction) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PointerAction) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PointerAction) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PointerAction) SetType(v string) {
	o.Type = &v
}

// GetButton returns the Button field value if set, zero value otherwise.
func (o *PointerAction) GetButton() int32 {
	if o == nil || o.Button == nil {
		var ret int32
		return ret
	}
	return *o.Button
}

// GetButtonOk returns a tuple with the Button field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PointerAction) GetButtonOk() (*int32, bool) {
	if o == nil || o.Button == nil {
		return nil, false
	}
	return o.Button, true
}

// HasButton returns a boolean if a field has been set.
func (o *PointerAction) HasButton() bool {
	if o != nil && o.Button != nil {
		return true
	}

	return false
}

// SetButton gets a reference to the given int32 and assigns it to the Button field.
func (o *PointerAction) SetButton(v int32) {
	o.Button = &v
}

// GetPressed returns the Pressed field value if set, zero value otherwise.
func (o *PointerAction) GetPressed() int32 {
	if o == nil || o.Pressed == nil {
		var ret int32
		return ret
	}
	return *o.Pressed
}

// GetPressedOk returns a tuple with the Pressed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PointerAction) GetPressedOk() (*int32, bool) {
	if o == nil || o.Pressed == nil {
		return nil, false
	}
	return o.Pressed, true
}

// HasPressed returns a boolean if a field has been set.
func (o *PointerAction) HasPressed() bool {
	if o != nil && o.Pressed != nil {
		return true
	}

	return false
}

// SetPressed gets a reference to the given int32 and assigns it to the Pressed field.
func (o *PointerAction) SetPressed(v int32) {
	o.Pressed = &v
}

// GetX returns the X field value if set, zero value otherwise.
func (o *PointerAction) GetX() int32 {
	if o == nil || o.X == nil {
		var ret int32
		return ret
	}
	return *o.X
}

// GetXOk returns a tuple with the X field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PointerAction) GetXOk() (*int32, bool) {
	if o == nil || o.X == nil {
		return nil, false
	}
	return o.X, true
}

// HasX returns a boolean if a field has been set.
func (o *PointerAction) HasX() bool {
	if o != nil && o.X != nil {
		return true
	}

	return false
}

// SetX gets a reference to the given int32 and assigns it to the X field.
func (o *PointerAction) SetX(v int32) {
	o.X = &v
}

// GetY returns the Y field value if set, zero value otherwise.
func (o *PointerAction) GetY() int32 {
	if o == nil || o.Y == nil {
		var ret int32
		return ret
	}
	return *o.Y
}

// GetYOk returns a tuple with the Y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PointerAction) GetYOk() (*int32, bool) {
	if o == nil || o.Y == nil {
		return nil, false
	}
	return o.Y, true
}

// HasY returns a boolean if a field has been set.
func (o *PointerAction) HasY() bool {
	if o != nil && o.Y != nil {
		return true
	}

	return false
}

// SetY gets a reference to the given int32 and assigns it to the Y field.
func (o *PointerAction) SetY(v int32) {
	o.Y = &v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *PointerAction) GetWidth() int32 {
	if o == nil || o.Width == nil {
		var ret int32
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PointerAction) GetWidthOk() (*int32, bool) {
	if o == nil || o.Width == nil {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *PointerAction) HasWidth() bool {
	if o != nil && o.Width != nil {
		return true
	}

	return false
}

// SetWidth gets a reference to the given int32 and assigns it to the Width field.
func (o *PointerAction) SetWidth(v int32) {
	o.Width = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *PointerAction) GetHeight() int32 {
	if o == nil || o.Height == nil {
		var ret int32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PointerAction) GetHeightOk() (*int32, bool) {
	if o == nil || o.Height == nil {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *PointerAction) HasHeight() bool {
	if o != nil && o.Height != nil {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int32 and assigns it to the Height field.
func (o *PointerAction) SetHeight(v int32) {
	o.Height = &v
}

// GetPressure returns the Pressure field value if set, zero value otherwise.
func (o *PointerAction) GetPressure() int32 {
	if o == nil || o.Pressure == nil {
		var ret int32
		return ret
	}
	return *o.Pressure
}

// GetPressureOk returns a tuple with the Pressure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PointerAction) GetPressureOk() (*int32, bool) {
	if o == nil || o.Pressure == nil {
		return nil, false
	}
	return o.Pressure, true
}

// HasPressure returns a boolean if a field has been set.
func (o *PointerAction) HasPressure() bool {
	if o != nil && o.Pressure != nil {
		return true
	}

	return false
}

// SetPressure gets a reference to the given int32 and assigns it to the Pressure field.
func (o *PointerAction) SetPressure(v int32) {
	o.Pressure = &v
}

// GetTangentialPressure returns the TangentialPressure field value if set, zero value otherwise.
func (o *PointerAction) GetTangentialPressure() int32 {
	if o == nil || o.TangentialPressure == nil {
		var ret int32
		return ret
	}
	return *o.TangentialPressure
}

// GetTangentialPressureOk returns a tuple with the TangentialPressure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PointerAction) GetTangentialPressureOk() (*int32, bool) {
	if o == nil || o.TangentialPressure == nil {
		return nil, false
	}
	return o.TangentialPressure, true
}

// HasTangentialPressure returns a boolean if a field has been set.
func (o *PointerAction) HasTangentialPressure() bool {
	if o != nil && o.TangentialPressure != nil {
		return true
	}

	return false
}

// SetTangentialPressure gets a reference to the given int32 and assigns it to the TangentialPressure field.
func (o *PointerAction) SetTangentialPressure(v int32) {
	o.TangentialPressure = &v
}

// GetTiltX returns the TiltX field value if set, zero value otherwise.
func (o *PointerAction) GetTiltX() int32 {
	if o == nil || o.TiltX == nil {
		var ret int32
		return ret
	}
	return *o.TiltX
}

// GetTiltXOk returns a tuple with the TiltX field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PointerAction) GetTiltXOk() (*int32, bool) {
	if o == nil || o.TiltX == nil {
		return nil, false
	}
	return o.TiltX, true
}

// HasTiltX returns a boolean if a field has been set.
func (o *PointerAction) HasTiltX() bool {
	if o != nil && o.TiltX != nil {
		return true
	}

	return false
}

// SetTiltX gets a reference to the given int32 and assigns it to the TiltX field.
func (o *PointerAction) SetTiltX(v int32) {
	o.TiltX = &v
}

// GetTiltY returns the TiltY field value if set, zero value otherwise.
func (o *PointerAction) GetTiltY() int32 {
	if o == nil || o.TiltY == nil {
		var ret int32
		return ret
	}
	return *o.TiltY
}

// GetTiltYOk returns a tuple with the TiltY field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PointerAction) GetTiltYOk() (*int32, bool) {
	if o == nil || o.TiltY == nil {
		return nil, false
	}
	return o.TiltY, true
}

// HasTiltY returns a boolean if a field has been set.
func (o *PointerAction) HasTiltY() bool {
	if o != nil && o.TiltY != nil {
		return true
	}

	return false
}

// SetTiltY gets a reference to the given int32 and assigns it to the TiltY field.
func (o *PointerAction) SetTiltY(v int32) {
	o.TiltY = &v
}

// GetTwist returns the Twist field value if set, zero value otherwise.
func (o *PointerAction) GetTwist() int32 {
	if o == nil || o.Twist == nil {
		var ret int32
		return ret
	}
	return *o.Twist
}

// GetTwistOk returns a tuple with the Twist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PointerAction) GetTwistOk() (*int32, bool) {
	if o == nil || o.Twist == nil {
		return nil, false
	}
	return o.Twist, true
}

// HasTwist returns a boolean if a field has been set.
func (o *PointerAction) HasTwist() bool {
	if o != nil && o.Twist != nil {
		return true
	}

	return false
}

// SetTwist gets a reference to the given int32 and assigns it to the Twist field.
func (o *PointerAction) SetTwist(v int32) {
	o.Twist = &v
}

// GetAltitudeAngle returns the AltitudeAngle field value if set, zero value otherwise.
func (o *PointerAction) GetAltitudeAngle() float32 {
	if o == nil || o.AltitudeAngle == nil {
		var ret float32
		return ret
	}
	return *o.AltitudeAngle
}

// GetAltitudeAngleOk returns a tuple with the AltitudeAngle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PointerAction) GetAltitudeAngleOk() (*float32, bool) {
	if o == nil || o.AltitudeAngle == nil {
		return nil, false
	}
	return o.AltitudeAngle, true
}

// HasAltitudeAngle returns a boolean if a field has been set.
func (o *PointerAction) HasAltitudeAngle() bool {
	if o != nil && o.AltitudeAngle != nil {
		return true
	}

	return false
}

// SetAltitudeAngle gets a reference to the given float32 and assigns it to the AltitudeAngle field.
func (o *PointerAction) SetAltitudeAngle(v float32) {
	o.AltitudeAngle = &v
}

// GetAsimuthAngle returns the AsimuthAngle field value if set, zero value otherwise.
func (o *PointerAction) GetAsimuthAngle() float32 {
	if o == nil || o.AsimuthAngle == nil {
		var ret float32
		return ret
	}
	return *o.AsimuthAngle
}

// GetAsimuthAngleOk returns a tuple with the AsimuthAngle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PointerAction) GetAsimuthAngleOk() (*float32, bool) {
	if o == nil || o.AsimuthAngle == nil {
		return nil, false
	}
	return o.AsimuthAngle, true
}

// HasAsimuthAngle returns a boolean if a field has been set.
func (o *PointerAction) HasAsimuthAngle() bool {
	if o != nil && o.AsimuthAngle != nil {
		return true
	}

	return false
}

// SetAsimuthAngle gets a reference to the given float32 and assigns it to the AsimuthAngle field.
func (o *PointerAction) SetAsimuthAngle(v float32) {
	o.AsimuthAngle = &v
}

// GetOrigin returns the Origin field value if set, zero value otherwise.
func (o *PointerAction) GetOrigin() ActionOrigin {
	if o == nil || o.Origin == nil {
		var ret ActionOrigin
		return ret
	}
	return *o.Origin
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PointerAction) GetOriginOk() (*ActionOrigin, bool) {
	if o == nil || o.Origin == nil {
		return nil, false
	}
	return o.Origin, true
}

// HasOrigin returns a boolean if a field has been set.
func (o *PointerAction) HasOrigin() bool {
	if o != nil && o.Origin != nil {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given ActionOrigin and assigns it to the Origin field.
func (o *PointerAction) SetOrigin(v ActionOrigin) {
	o.Origin = &v
}

func (o PointerAction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Button != nil {
		toSerialize["button"] = o.Button
	}
	if o.Pressed != nil {
		toSerialize["pressed"] = o.Pressed
	}
	if o.X != nil {
		toSerialize["x"] = o.X
	}
	if o.Y != nil {
		toSerialize["y"] = o.Y
	}
	if o.Width != nil {
		toSerialize["width"] = o.Width
	}
	if o.Height != nil {
		toSerialize["height"] = o.Height
	}
	if o.Pressure != nil {
		toSerialize["pressure"] = o.Pressure
	}
	if o.TangentialPressure != nil {
		toSerialize["tangentialPressure"] = o.TangentialPressure
	}
	if o.TiltX != nil {
		toSerialize["tiltX"] = o.TiltX
	}
	if o.TiltY != nil {
		toSerialize["tiltY"] = o.TiltY
	}
	if o.Twist != nil {
		toSerialize["twist"] = o.Twist
	}
	if o.AltitudeAngle != nil {
		toSerialize["altitudeAngle"] = o.AltitudeAngle
	}
	if o.AsimuthAngle != nil {
		toSerialize["asimuthAngle"] = o.AsimuthAngle
	}
	if o.Origin != nil {
		toSerialize["origin"] = o.Origin
	}
	return json.Marshal(toSerialize)
}

type NilablePointerAction struct {
	value *PointerAction
	isSet bool
}

func (v NilablePointerAction) Get() *PointerAction {
	return v.value
}

func (v *NilablePointerAction) Set(val *PointerAction) {
	v.value = val
	v.isSet = true
}

func (v NilablePointerAction) IsSet() bool {
	return v.isSet
}

func (v *NilablePointerAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNilablePointerAction(val *PointerAction) *NilablePointerAction {
	return &NilablePointerAction{value: val, isSet: true}
}

func (v NilablePointerAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NilablePointerAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


