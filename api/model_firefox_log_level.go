/*
Selenium WebDriver

[Selenium WebDriver](https://www.w3.org/TR/webdriver) API specification

API version: 1.0.0
Contact: support@aerokube.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// FirefoxLogLevel the model 'FirefoxLogLevel'
type FirefoxLogLevel string

// List of FirefoxLogLevel
const (
	FIREFOXLOGLEVEL_FATAL FirefoxLogLevel = "fatal"
	FIREFOXLOGLEVEL_ERROR FirefoxLogLevel = "error"
	FIREFOXLOGLEVEL_WARN FirefoxLogLevel = "warn"
	FIREFOXLOGLEVEL_INFO FirefoxLogLevel = "info"
	FIREFOXLOGLEVEL_CONFIG FirefoxLogLevel = "config"
	FIREFOXLOGLEVEL_DEBUG FirefoxLogLevel = "debug"
	FIREFOXLOGLEVEL_TRACE FirefoxLogLevel = "trace"
)

// All allowed values of FirefoxLogLevel enum
var AllowedFirefoxLogLevelEnumValues = []FirefoxLogLevel{
	"fatal",
	"error",
	"warn",
	"info",
	"config",
	"debug",
	"trace",
}

func (v *FirefoxLogLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FirefoxLogLevel(value)
	for _, existing := range AllowedFirefoxLogLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FirefoxLogLevel", value)
}

// NewFirefoxLogLevelFromValue returns a pointer to a valid FirefoxLogLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFirefoxLogLevelFromValue(v string) (*FirefoxLogLevel, error) {
	ev := FirefoxLogLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FirefoxLogLevel: valid values are %v", v, AllowedFirefoxLogLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FirefoxLogLevel) IsValid() bool {
	for _, existing := range AllowedFirefoxLogLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FirefoxLogLevel value
func (v FirefoxLogLevel) Ptr() *FirefoxLogLevel {
	return &v
}

type NullableFirefoxLogLevel struct {
	value *FirefoxLogLevel
	isSet bool
}

func (v NullableFirefoxLogLevel) Get() *FirefoxLogLevel {
	return v.value
}

func (v *NullableFirefoxLogLevel) Set(val *FirefoxLogLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableFirefoxLogLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableFirefoxLogLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirefoxLogLevel(val *FirefoxLogLevel) *NullableFirefoxLogLevel {
	return &NullableFirefoxLogLevel{value: val, isSet: true}
}

func (v NullableFirefoxLogLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirefoxLogLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

