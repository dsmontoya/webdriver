/*
Selenium WebDriver

[Selenium WebDriver](https://www.w3.org/TR/webdriver) API specification

API version: 1.0.0
Contact: support@aerokube.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// MoonLogLevel - Browser log level
type MoonLogLevel struct {
	ChromiumLogLevel *ChromiumLogLevel
	FirefoxLogLevel *FirefoxLogLevel
}

// ChromiumLogLevelAsMoonLogLevel is a convenience function that returns ChromiumLogLevel wrapped in MoonLogLevel
func ChromiumLogLevelAsMoonLogLevel(v *ChromiumLogLevel) MoonLogLevel {
	return MoonLogLevel{
		ChromiumLogLevel: v,
	}
}

// FirefoxLogLevelAsMoonLogLevel is a convenience function that returns FirefoxLogLevel wrapped in MoonLogLevel
func FirefoxLogLevelAsMoonLogLevel(v *FirefoxLogLevel) MoonLogLevel {
	return MoonLogLevel{
		FirefoxLogLevel: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *MoonLogLevel) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ChromiumLogLevel
	err = newStrictDecoder(data).Decode(&dst.ChromiumLogLevel)
	if err == nil {
		jsonChromiumLogLevel, _ := json.Marshal(dst.ChromiumLogLevel)
		if string(jsonChromiumLogLevel) == "{}" { // empty struct
			dst.ChromiumLogLevel = nil
		} else {
			match++
		}
	} else {
		dst.ChromiumLogLevel = nil
	}

	// try to unmarshal data into FirefoxLogLevel
	err = newStrictDecoder(data).Decode(&dst.FirefoxLogLevel)
	if err == nil {
		jsonFirefoxLogLevel, _ := json.Marshal(dst.FirefoxLogLevel)
		if string(jsonFirefoxLogLevel) == "{}" { // empty struct
			dst.FirefoxLogLevel = nil
		} else {
			match++
		}
	} else {
		dst.FirefoxLogLevel = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ChromiumLogLevel = nil
		dst.FirefoxLogLevel = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(MoonLogLevel)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(MoonLogLevel)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MoonLogLevel) MarshalJSON() ([]byte, error) {
	if src.ChromiumLogLevel != nil {
		return json.Marshal(&src.ChromiumLogLevel)
	}

	if src.FirefoxLogLevel != nil {
		return json.Marshal(&src.FirefoxLogLevel)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MoonLogLevel) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ChromiumLogLevel != nil {
		return obj.ChromiumLogLevel
	}

	if obj.FirefoxLogLevel != nil {
		return obj.FirefoxLogLevel
	}

	// all schemas are nil
	return nil
}

type NilableMoonLogLevel struct {
	value *MoonLogLevel
	isSet bool
}

func (v NilableMoonLogLevel) Get() *MoonLogLevel {
	return v.value
}

func (v *NilableMoonLogLevel) Set(val *MoonLogLevel) {
	v.value = val
	v.isSet = true
}

func (v NilableMoonLogLevel) IsSet() bool {
	return v.isSet
}

func (v *NilableMoonLogLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNilableMoonLogLevel(val *MoonLogLevel) *NilableMoonLogLevel {
	return &NilableMoonLogLevel{value: val, isSet: true}
}

func (v NilableMoonLogLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NilableMoonLogLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


