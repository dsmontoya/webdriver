/*
Selenium WebDriver

[Selenium WebDriver](https://www.w3.org/TR/webdriver) API specification

API version: 1.0.0
Contact: support@aerokube.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// FirefoxContext the model 'FirefoxContext'
type FirefoxContext string

// List of FirefoxContext
const (
	FIREFOXCONTEXT_CONTENT FirefoxContext = "content"
	FIREFOXCONTEXT_CHROME FirefoxContext = "chrome"
)

// All allowed values of FirefoxContext enum
var AllowedFirefoxContextEnumValues = []FirefoxContext{
	"content",
	"chrome",
}

func (v *FirefoxContext) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FirefoxContext(value)
	for _, existing := range AllowedFirefoxContextEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FirefoxContext", value)
}

// NewFirefoxContextFromValue returns a pointer to a valid FirefoxContext
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFirefoxContextFromValue(v string) (*FirefoxContext, error) {
	ev := FirefoxContext(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FirefoxContext: valid values are %v", v, AllowedFirefoxContextEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FirefoxContext) IsValid() bool {
	for _, existing := range AllowedFirefoxContextEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FirefoxContext value
func (v FirefoxContext) Ptr() *FirefoxContext {
	return &v
}

type NullableFirefoxContext struct {
	value *FirefoxContext
	isSet bool
}

func (v NullableFirefoxContext) Get() *FirefoxContext {
	return v.value
}

func (v *NullableFirefoxContext) Set(val *FirefoxContext) {
	v.value = val
	v.isSet = true
}

func (v NullableFirefoxContext) IsSet() bool {
	return v.isSet
}

func (v *NullableFirefoxContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirefoxContext(val *FirefoxContext) *NullableFirefoxContext {
	return &NullableFirefoxContext{value: val, isSet: true}
}

func (v NullableFirefoxContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirefoxContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

