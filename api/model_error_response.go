/*
Selenium WebDriver

[Selenium WebDriver](https://www.w3.org/TR/webdriver) API specification

API version: 1.0.0
Contact: support@aerokube.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ErrorResponse struct for ErrorResponse
type ErrorResponse struct {
	Value ErrorResponseValue `json:"value"`
}

// NewErrorResponse instantiates a new ErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorResponse(value ErrorResponseValue) *ErrorResponse {
	this := ErrorResponse{}
	this.Value = value
	return &this
}

// NewErrorResponseWithDefaults instantiates a new ErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorResponseWithDefaults() *ErrorResponse {
	this := ErrorResponse{}
	return &this
}

// GetValue returns the Value field value
func (o *ErrorResponse) GetValue() ErrorResponseValue {
	if o == nil {
		var ret ErrorResponseValue
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ErrorResponse) GetValueOk() (*ErrorResponseValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ErrorResponse) SetValue(v ErrorResponseValue) {
	o.Value = v
}

func (o ErrorResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NilableErrorResponse struct {
	value *ErrorResponse
	isSet bool
}

func (v NilableErrorResponse) Get() *ErrorResponse {
	return v.value
}

func (v *NilableErrorResponse) Set(val *ErrorResponse) {
	v.value = val
	v.isSet = true
}

func (v NilableErrorResponse) IsSet() bool {
	return v.isSet
}

func (v *NilableErrorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNilableErrorResponse(val *ErrorResponse) *NilableErrorResponse {
	return &NilableErrorResponse{value: val, isSet: true}
}

func (v NilableErrorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NilableErrorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


