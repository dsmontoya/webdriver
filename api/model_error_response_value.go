/*
Selenium WebDriver

[Selenium WebDriver](https://www.w3.org/TR/webdriver) API specification

API version: 1.0.0
Contact: support@aerokube.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ErrorResponseValue struct for ErrorResponseValue
type ErrorResponseValue struct {
	Error ErrorCode `json:"error"`
	Message string `json:"message"`
	Stacktrace string `json:"stacktrace"`
	Data map[string]map[string]interface{} `json:"data,omitempty"`
}

// NewErrorResponseValue instantiates a new ErrorResponseValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorResponseValue(error_ ErrorCode, message string, stacktrace string) *ErrorResponseValue {
	this := ErrorResponseValue{}
	this.Error = error_
	this.Message = message
	this.Stacktrace = stacktrace
	return &this
}

// NewErrorResponseValueWithDefaults instantiates a new ErrorResponseValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorResponseValueWithDefaults() *ErrorResponseValue {
	this := ErrorResponseValue{}
	return &this
}

// GetError returns the Error field value
func (o *ErrorResponseValue) GetError() ErrorCode {
	if o == nil {
		var ret ErrorCode
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *ErrorResponseValue) GetErrorOk() (*ErrorCode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *ErrorResponseValue) SetError(v ErrorCode) {
	o.Error = v
}

// GetMessage returns the Message field value
func (o *ErrorResponseValue) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ErrorResponseValue) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ErrorResponseValue) SetMessage(v string) {
	o.Message = v
}

// GetStacktrace returns the Stacktrace field value
func (o *ErrorResponseValue) GetStacktrace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Stacktrace
}

// GetStacktraceOk returns a tuple with the Stacktrace field value
// and a boolean to check if the value has been set.
func (o *ErrorResponseValue) GetStacktraceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stacktrace, true
}

// SetStacktrace sets field value
func (o *ErrorResponseValue) SetStacktrace(v string) {
	o.Stacktrace = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ErrorResponseValue) GetData() map[string]map[string]interface{} {
	if o == nil || o.Data == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResponseValue) GetDataOk() (map[string]map[string]interface{}, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ErrorResponseValue) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]map[string]interface{} and assigns it to the Data field.
func (o *ErrorResponseValue) SetData(v map[string]map[string]interface{}) {
	o.Data = v
}

func (o ErrorResponseValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["error"] = o.Error
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["stacktrace"] = o.Stacktrace
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NilableErrorResponseValue struct {
	value *ErrorResponseValue
	isSet bool
}

func (v NilableErrorResponseValue) Get() *ErrorResponseValue {
	return v.value
}

func (v *NilableErrorResponseValue) Set(val *ErrorResponseValue) {
	v.value = val
	v.isSet = true
}

func (v NilableErrorResponseValue) IsSet() bool {
	return v.isSet
}

func (v *NilableErrorResponseValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNilableErrorResponseValue(val *ErrorResponseValue) *NilableErrorResponseValue {
	return &NilableErrorResponseValue{value: val, isSet: true}
}

func (v NilableErrorResponseValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NilableErrorResponseValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


