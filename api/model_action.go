/*
Selenium WebDriver

[Selenium WebDriver](https://www.w3.org/TR/webdriver) API specification

API version: 1.0.0
Contact: support@aerokube.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// Action - struct for Action
type Action struct {
	KeyAction *KeyAction
	NullAction *NullAction
	PointerAction *PointerAction
	WheelAction *WheelAction
}

// KeyActionAsAction is a convenience function that returns KeyAction wrapped in Action
func KeyActionAsAction(v *KeyAction) Action {
	return Action{
		KeyAction: v,
	}
}

// NullActionAsAction is a convenience function that returns NullAction wrapped in Action
func NullActionAsAction(v *NullAction) Action {
	return Action{
		NullAction: v,
	}
}

// PointerActionAsAction is a convenience function that returns PointerAction wrapped in Action
func PointerActionAsAction(v *PointerAction) Action {
	return Action{
		PointerAction: v,
	}
}

// WheelActionAsAction is a convenience function that returns WheelAction wrapped in Action
func WheelActionAsAction(v *WheelAction) Action {
	return Action{
		WheelAction: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Action) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into KeyAction
	err = newStrictDecoder(data).Decode(&dst.KeyAction)
	if err == nil {
		jsonKeyAction, _ := json.Marshal(dst.KeyAction)
		if string(jsonKeyAction) == "{}" { // empty struct
			dst.KeyAction = nil
		} else {
			match++
		}
	} else {
		dst.KeyAction = nil
	}

	// try to unmarshal data into NullAction
	err = newStrictDecoder(data).Decode(&dst.NullAction)
	if err == nil {
		jsonNullAction, _ := json.Marshal(dst.NullAction)
		if string(jsonNullAction) == "{}" { // empty struct
			dst.NullAction = nil
		} else {
			match++
		}
	} else {
		dst.NullAction = nil
	}

	// try to unmarshal data into PointerAction
	err = newStrictDecoder(data).Decode(&dst.PointerAction)
	if err == nil {
		jsonPointerAction, _ := json.Marshal(dst.PointerAction)
		if string(jsonPointerAction) == "{}" { // empty struct
			dst.PointerAction = nil
		} else {
			match++
		}
	} else {
		dst.PointerAction = nil
	}

	// try to unmarshal data into WheelAction
	err = newStrictDecoder(data).Decode(&dst.WheelAction)
	if err == nil {
		jsonWheelAction, _ := json.Marshal(dst.WheelAction)
		if string(jsonWheelAction) == "{}" { // empty struct
			dst.WheelAction = nil
		} else {
			match++
		}
	} else {
		dst.WheelAction = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.KeyAction = nil
		dst.NullAction = nil
		dst.PointerAction = nil
		dst.WheelAction = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(Action)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(Action)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Action) MarshalJSON() ([]byte, error) {
	if src.KeyAction != nil {
		return json.Marshal(&src.KeyAction)
	}

	if src.NullAction != nil {
		return json.Marshal(&src.NullAction)
	}

	if src.PointerAction != nil {
		return json.Marshal(&src.PointerAction)
	}

	if src.WheelAction != nil {
		return json.Marshal(&src.WheelAction)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Action) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.KeyAction != nil {
		return obj.KeyAction
	}

	if obj.NullAction != nil {
		return obj.NullAction
	}

	if obj.PointerAction != nil {
		return obj.PointerAction
	}

	if obj.WheelAction != nil {
		return obj.WheelAction
	}

	// all schemas are nil
	return nil
}

type NilableAction struct {
	value *Action
	isSet bool
}

func (v NilableAction) Get() *Action {
	return v.value
}

func (v *NilableAction) Set(val *Action) {
	v.value = val
	v.isSet = true
}

func (v NilableAction) IsSet() bool {
	return v.isSet
}

func (v *NilableAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNilableAction(val *Action) *NilableAction {
	return &NilableAction{value: val, isSet: true}
}

func (v NilableAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NilableAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


