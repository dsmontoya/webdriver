/*
Selenium WebDriver

[Selenium WebDriver](https://www.w3.org/TR/webdriver) API specification

API version: 1.0.0
Contact: support@aerokube.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ContextRequest struct for ContextRequest
type ContextRequest struct {
	Context FirefoxContext `json:"context"`
}

// NewContextRequest instantiates a new ContextRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContextRequest(context FirefoxContext) *ContextRequest {
	this := ContextRequest{}
	this.Context = context
	return &this
}

// NewContextRequestWithDefaults instantiates a new ContextRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContextRequestWithDefaults() *ContextRequest {
	this := ContextRequest{}
	return &this
}

// GetContext returns the Context field value
func (o *ContextRequest) GetContext() FirefoxContext {
	if o == nil {
		var ret FirefoxContext
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *ContextRequest) GetContextOk() (*FirefoxContext, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *ContextRequest) SetContext(v FirefoxContext) {
	o.Context = v
}

func (o ContextRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["context"] = o.Context
	}
	return json.Marshal(toSerialize)
}

type NilableContextRequest struct {
	value *ContextRequest
	isSet bool
}

func (v NilableContextRequest) Get() *ContextRequest {
	return v.value
}

func (v *NilableContextRequest) Set(val *ContextRequest) {
	v.value = val
	v.isSet = true
}

func (v NilableContextRequest) IsSet() bool {
	return v.isSet
}

func (v *NilableContextRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNilableContextRequest(val *ContextRequest) *NilableContextRequest {
	return &NilableContextRequest{value: val, isSet: true}
}

func (v NilableContextRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NilableContextRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


