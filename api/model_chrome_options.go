/*
Selenium WebDriver

[Selenium WebDriver](https://www.w3.org/TR/webdriver) API specification

API version: 1.0.0
Contact: support@aerokube.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ChromeOptions struct for ChromeOptions
type ChromeOptions struct {
	Args []string `json:"args,omitempty"`
	Binary *string `json:"binary,omitempty"`
	DebuggerAddress *string `json:"debuggerAddress,omitempty"`
	Detach *bool `json:"detach,omitempty"`
	ExcludeSwitches []string `json:"excludeSwitches,omitempty"`
	Extensions []string `json:"extensions,omitempty"`
	LocalState *map[string]PreferenceValue `json:"localState,omitempty"`
	MinidumpPath *string `json:"minidumpPath,omitempty"`
	MobileEmulation *MobileEmulation `json:"mobileEmulation,omitempty"`
	PerfLoggingPrefs *PerfLoggingPrefs `json:"perfLoggingPrefs,omitempty"`
	Prefs []PreferenceValue `json:"prefs,omitempty"`
	WindowTypes []string `json:"windowTypes,omitempty"`
}

// NewChromeOptions instantiates a new ChromeOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChromeOptions() *ChromeOptions {
	this := ChromeOptions{}
	return &this
}

// NewChromeOptionsWithDefaults instantiates a new ChromeOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChromeOptionsWithDefaults() *ChromeOptions {
	this := ChromeOptions{}
	return &this
}

// GetArgs returns the Args field value if set, zero value otherwise.
func (o *ChromeOptions) GetArgs() []string {
	if o == nil || o.Args == nil {
		var ret []string
		return ret
	}
	return o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChromeOptions) GetArgsOk() ([]string, bool) {
	if o == nil || o.Args == nil {
		return nil, false
	}
	return o.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *ChromeOptions) HasArgs() bool {
	if o != nil && o.Args != nil {
		return true
	}

	return false
}

// SetArgs gets a reference to the given []string and assigns it to the Args field.
func (o *ChromeOptions) SetArgs(v []string) {
	o.Args = v
}

// GetBinary returns the Binary field value if set, zero value otherwise.
func (o *ChromeOptions) GetBinary() string {
	if o == nil || o.Binary == nil {
		var ret string
		return ret
	}
	return *o.Binary
}

// GetBinaryOk returns a tuple with the Binary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChromeOptions) GetBinaryOk() (*string, bool) {
	if o == nil || o.Binary == nil {
		return nil, false
	}
	return o.Binary, true
}

// HasBinary returns a boolean if a field has been set.
func (o *ChromeOptions) HasBinary() bool {
	if o != nil && o.Binary != nil {
		return true
	}

	return false
}

// SetBinary gets a reference to the given string and assigns it to the Binary field.
func (o *ChromeOptions) SetBinary(v string) {
	o.Binary = &v
}

// GetDebuggerAddress returns the DebuggerAddress field value if set, zero value otherwise.
func (o *ChromeOptions) GetDebuggerAddress() string {
	if o == nil || o.DebuggerAddress == nil {
		var ret string
		return ret
	}
	return *o.DebuggerAddress
}

// GetDebuggerAddressOk returns a tuple with the DebuggerAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChromeOptions) GetDebuggerAddressOk() (*string, bool) {
	if o == nil || o.DebuggerAddress == nil {
		return nil, false
	}
	return o.DebuggerAddress, true
}

// HasDebuggerAddress returns a boolean if a field has been set.
func (o *ChromeOptions) HasDebuggerAddress() bool {
	if o != nil && o.DebuggerAddress != nil {
		return true
	}

	return false
}

// SetDebuggerAddress gets a reference to the given string and assigns it to the DebuggerAddress field.
func (o *ChromeOptions) SetDebuggerAddress(v string) {
	o.DebuggerAddress = &v
}

// GetDetach returns the Detach field value if set, zero value otherwise.
func (o *ChromeOptions) GetDetach() bool {
	if o == nil || o.Detach == nil {
		var ret bool
		return ret
	}
	return *o.Detach
}

// GetDetachOk returns a tuple with the Detach field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChromeOptions) GetDetachOk() (*bool, bool) {
	if o == nil || o.Detach == nil {
		return nil, false
	}
	return o.Detach, true
}

// HasDetach returns a boolean if a field has been set.
func (o *ChromeOptions) HasDetach() bool {
	if o != nil && o.Detach != nil {
		return true
	}

	return false
}

// SetDetach gets a reference to the given bool and assigns it to the Detach field.
func (o *ChromeOptions) SetDetach(v bool) {
	o.Detach = &v
}

// GetExcludeSwitches returns the ExcludeSwitches field value if set, zero value otherwise.
func (o *ChromeOptions) GetExcludeSwitches() []string {
	if o == nil || o.ExcludeSwitches == nil {
		var ret []string
		return ret
	}
	return o.ExcludeSwitches
}

// GetExcludeSwitchesOk returns a tuple with the ExcludeSwitches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChromeOptions) GetExcludeSwitchesOk() ([]string, bool) {
	if o == nil || o.ExcludeSwitches == nil {
		return nil, false
	}
	return o.ExcludeSwitches, true
}

// HasExcludeSwitches returns a boolean if a field has been set.
func (o *ChromeOptions) HasExcludeSwitches() bool {
	if o != nil && o.ExcludeSwitches != nil {
		return true
	}

	return false
}

// SetExcludeSwitches gets a reference to the given []string and assigns it to the ExcludeSwitches field.
func (o *ChromeOptions) SetExcludeSwitches(v []string) {
	o.ExcludeSwitches = v
}

// GetExtensions returns the Extensions field value if set, zero value otherwise.
func (o *ChromeOptions) GetExtensions() []string {
	if o == nil || o.Extensions == nil {
		var ret []string
		return ret
	}
	return o.Extensions
}

// GetExtensionsOk returns a tuple with the Extensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChromeOptions) GetExtensionsOk() ([]string, bool) {
	if o == nil || o.Extensions == nil {
		return nil, false
	}
	return o.Extensions, true
}

// HasExtensions returns a boolean if a field has been set.
func (o *ChromeOptions) HasExtensions() bool {
	if o != nil && o.Extensions != nil {
		return true
	}

	return false
}

// SetExtensions gets a reference to the given []string and assigns it to the Extensions field.
func (o *ChromeOptions) SetExtensions(v []string) {
	o.Extensions = v
}

// GetLocalState returns the LocalState field value if set, zero value otherwise.
func (o *ChromeOptions) GetLocalState() map[string]PreferenceValue {
	if o == nil || o.LocalState == nil {
		var ret map[string]PreferenceValue
		return ret
	}
	return *o.LocalState
}

// GetLocalStateOk returns a tuple with the LocalState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChromeOptions) GetLocalStateOk() (*map[string]PreferenceValue, bool) {
	if o == nil || o.LocalState == nil {
		return nil, false
	}
	return o.LocalState, true
}

// HasLocalState returns a boolean if a field has been set.
func (o *ChromeOptions) HasLocalState() bool {
	if o != nil && o.LocalState != nil {
		return true
	}

	return false
}

// SetLocalState gets a reference to the given map[string]PreferenceValue and assigns it to the LocalState field.
func (o *ChromeOptions) SetLocalState(v map[string]PreferenceValue) {
	o.LocalState = &v
}

// GetMinidumpPath returns the MinidumpPath field value if set, zero value otherwise.
func (o *ChromeOptions) GetMinidumpPath() string {
	if o == nil || o.MinidumpPath == nil {
		var ret string
		return ret
	}
	return *o.MinidumpPath
}

// GetMinidumpPathOk returns a tuple with the MinidumpPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChromeOptions) GetMinidumpPathOk() (*string, bool) {
	if o == nil || o.MinidumpPath == nil {
		return nil, false
	}
	return o.MinidumpPath, true
}

// HasMinidumpPath returns a boolean if a field has been set.
func (o *ChromeOptions) HasMinidumpPath() bool {
	if o != nil && o.MinidumpPath != nil {
		return true
	}

	return false
}

// SetMinidumpPath gets a reference to the given string and assigns it to the MinidumpPath field.
func (o *ChromeOptions) SetMinidumpPath(v string) {
	o.MinidumpPath = &v
}

// GetMobileEmulation returns the MobileEmulation field value if set, zero value otherwise.
func (o *ChromeOptions) GetMobileEmulation() MobileEmulation {
	if o == nil || o.MobileEmulation == nil {
		var ret MobileEmulation
		return ret
	}
	return *o.MobileEmulation
}

// GetMobileEmulationOk returns a tuple with the MobileEmulation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChromeOptions) GetMobileEmulationOk() (*MobileEmulation, bool) {
	if o == nil || o.MobileEmulation == nil {
		return nil, false
	}
	return o.MobileEmulation, true
}

// HasMobileEmulation returns a boolean if a field has been set.
func (o *ChromeOptions) HasMobileEmulation() bool {
	if o != nil && o.MobileEmulation != nil {
		return true
	}

	return false
}

// SetMobileEmulation gets a reference to the given MobileEmulation and assigns it to the MobileEmulation field.
func (o *ChromeOptions) SetMobileEmulation(v MobileEmulation) {
	o.MobileEmulation = &v
}

// GetPerfLoggingPrefs returns the PerfLoggingPrefs field value if set, zero value otherwise.
func (o *ChromeOptions) GetPerfLoggingPrefs() PerfLoggingPrefs {
	if o == nil || o.PerfLoggingPrefs == nil {
		var ret PerfLoggingPrefs
		return ret
	}
	return *o.PerfLoggingPrefs
}

// GetPerfLoggingPrefsOk returns a tuple with the PerfLoggingPrefs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChromeOptions) GetPerfLoggingPrefsOk() (*PerfLoggingPrefs, bool) {
	if o == nil || o.PerfLoggingPrefs == nil {
		return nil, false
	}
	return o.PerfLoggingPrefs, true
}

// HasPerfLoggingPrefs returns a boolean if a field has been set.
func (o *ChromeOptions) HasPerfLoggingPrefs() bool {
	if o != nil && o.PerfLoggingPrefs != nil {
		return true
	}

	return false
}

// SetPerfLoggingPrefs gets a reference to the given PerfLoggingPrefs and assigns it to the PerfLoggingPrefs field.
func (o *ChromeOptions) SetPerfLoggingPrefs(v PerfLoggingPrefs) {
	o.PerfLoggingPrefs = &v
}

// GetPrefs returns the Prefs field value if set, zero value otherwise.
func (o *ChromeOptions) GetPrefs() []PreferenceValue {
	if o == nil || o.Prefs == nil {
		var ret []PreferenceValue
		return ret
	}
	return o.Prefs
}

// GetPrefsOk returns a tuple with the Prefs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChromeOptions) GetPrefsOk() ([]PreferenceValue, bool) {
	if o == nil || o.Prefs == nil {
		return nil, false
	}
	return o.Prefs, true
}

// HasPrefs returns a boolean if a field has been set.
func (o *ChromeOptions) HasPrefs() bool {
	if o != nil && o.Prefs != nil {
		return true
	}

	return false
}

// SetPrefs gets a reference to the given []PreferenceValue and assigns it to the Prefs field.
func (o *ChromeOptions) SetPrefs(v []PreferenceValue) {
	o.Prefs = v
}

// GetWindowTypes returns the WindowTypes field value if set, zero value otherwise.
func (o *ChromeOptions) GetWindowTypes() []string {
	if o == nil || o.WindowTypes == nil {
		var ret []string
		return ret
	}
	return o.WindowTypes
}

// GetWindowTypesOk returns a tuple with the WindowTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChromeOptions) GetWindowTypesOk() ([]string, bool) {
	if o == nil || o.WindowTypes == nil {
		return nil, false
	}
	return o.WindowTypes, true
}

// HasWindowTypes returns a boolean if a field has been set.
func (o *ChromeOptions) HasWindowTypes() bool {
	if o != nil && o.WindowTypes != nil {
		return true
	}

	return false
}

// SetWindowTypes gets a reference to the given []string and assigns it to the WindowTypes field.
func (o *ChromeOptions) SetWindowTypes(v []string) {
	o.WindowTypes = v
}

func (o ChromeOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Args != nil {
		toSerialize["args"] = o.Args
	}
	if o.Binary != nil {
		toSerialize["binary"] = o.Binary
	}
	if o.DebuggerAddress != nil {
		toSerialize["debuggerAddress"] = o.DebuggerAddress
	}
	if o.Detach != nil {
		toSerialize["detach"] = o.Detach
	}
	if o.ExcludeSwitches != nil {
		toSerialize["excludeSwitches"] = o.ExcludeSwitches
	}
	if o.Extensions != nil {
		toSerialize["extensions"] = o.Extensions
	}
	if o.LocalState != nil {
		toSerialize["localState"] = o.LocalState
	}
	if o.MinidumpPath != nil {
		toSerialize["minidumpPath"] = o.MinidumpPath
	}
	if o.MobileEmulation != nil {
		toSerialize["mobileEmulation"] = o.MobileEmulation
	}
	if o.PerfLoggingPrefs != nil {
		toSerialize["perfLoggingPrefs"] = o.PerfLoggingPrefs
	}
	if o.Prefs != nil {
		toSerialize["prefs"] = o.Prefs
	}
	if o.WindowTypes != nil {
		toSerialize["windowTypes"] = o.WindowTypes
	}
	return json.Marshal(toSerialize)
}

type NilableChromeOptions struct {
	value *ChromeOptions
	isSet bool
}

func (v NilableChromeOptions) Get() *ChromeOptions {
	return v.value
}

func (v *NilableChromeOptions) Set(val *ChromeOptions) {
	v.value = val
	v.isSet = true
}

func (v NilableChromeOptions) IsSet() bool {
	return v.isSet
}

func (v *NilableChromeOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNilableChromeOptions(val *ChromeOptions) *NilableChromeOptions {
	return &NilableChromeOptions{value: val, isSet: true}
}

func (v NilableChromeOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NilableChromeOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


