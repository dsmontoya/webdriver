/*
Selenium WebDriver

[Selenium WebDriver](https://www.w3.org/TR/webdriver) API specification

API version: 1.0.0
Contact: support@aerokube.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// KeyAction struct for KeyAction
type KeyAction struct {
	Type *string `json:"type,omitempty"`
	Value *string `json:"value,omitempty"`
	Pressed *bool `json:"pressed,omitempty"`
	Duration *int32 `json:"duration,omitempty"`
}

// NewKeyAction instantiates a new KeyAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyAction() *KeyAction {
	this := KeyAction{}
	var type_ string = "pause"
	this.Type = &type_
	return &this
}

// NewKeyActionWithDefaults instantiates a new KeyAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyActionWithDefaults() *KeyAction {
	this := KeyAction{}
	var type_ string = "pause"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *KeyAction) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyAction) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *KeyAction) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *KeyAction) SetType(v string) {
	o.Type = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *KeyAction) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyAction) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *KeyAction) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *KeyAction) SetValue(v string) {
	o.Value = &v
}

// GetPressed returns the Pressed field value if set, zero value otherwise.
func (o *KeyAction) GetPressed() bool {
	if o == nil || o.Pressed == nil {
		var ret bool
		return ret
	}
	return *o.Pressed
}

// GetPressedOk returns a tuple with the Pressed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyAction) GetPressedOk() (*bool, bool) {
	if o == nil || o.Pressed == nil {
		return nil, false
	}
	return o.Pressed, true
}

// HasPressed returns a boolean if a field has been set.
func (o *KeyAction) HasPressed() bool {
	if o != nil && o.Pressed != nil {
		return true
	}

	return false
}

// SetPressed gets a reference to the given bool and assigns it to the Pressed field.
func (o *KeyAction) SetPressed(v bool) {
	o.Pressed = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *KeyAction) GetDuration() int32 {
	if o == nil || o.Duration == nil {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyAction) GetDurationOk() (*int32, bool) {
	if o == nil || o.Duration == nil {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *KeyAction) HasDuration() bool {
	if o != nil && o.Duration != nil {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *KeyAction) SetDuration(v int32) {
	o.Duration = &v
}

func (o KeyAction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.Pressed != nil {
		toSerialize["pressed"] = o.Pressed
	}
	if o.Duration != nil {
		toSerialize["duration"] = o.Duration
	}
	return json.Marshal(toSerialize)
}

type NilableKeyAction struct {
	value *KeyAction
	isSet bool
}

func (v NilableKeyAction) Get() *KeyAction {
	return v.value
}

func (v *NilableKeyAction) Set(val *KeyAction) {
	v.value = val
	v.isSet = true
}

func (v NilableKeyAction) IsSet() bool {
	return v.isSet
}

func (v *NilableKeyAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNilableKeyAction(val *KeyAction) *NilableKeyAction {
	return &NilableKeyAction{value: val, isSet: true}
}

func (v NilableKeyAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NilableKeyAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


