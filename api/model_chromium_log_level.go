/*
Selenium WebDriver

[Selenium WebDriver](https://www.w3.org/TR/webdriver) API specification

API version: 1.0.0
Contact: support@aerokube.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// ChromiumLogLevel the model 'ChromiumLogLevel'
type ChromiumLogLevel string

// List of ChromiumLogLevel
const (
	CHROMIUMLOGLEVEL_OFF ChromiumLogLevel = "OFF"
	CHROMIUMLOGLEVEL_SEVERE ChromiumLogLevel = "SEVERE"
	CHROMIUMLOGLEVEL_WARNING ChromiumLogLevel = "WARNING"
	CHROMIUMLOGLEVEL_INFO ChromiumLogLevel = "INFO"
	CHROMIUMLOGLEVEL_DEBUG ChromiumLogLevel = "DEBUG"
	CHROMIUMLOGLEVEL_ALL ChromiumLogLevel = "ALL"
)

// All allowed values of ChromiumLogLevel enum
var AllowedChromiumLogLevelEnumValues = []ChromiumLogLevel{
	"OFF",
	"SEVERE",
	"WARNING",
	"INFO",
	"DEBUG",
	"ALL",
}

func (v *ChromiumLogLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChromiumLogLevel(value)
	for _, existing := range AllowedChromiumLogLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChromiumLogLevel", value)
}

// NewChromiumLogLevelFromValue returns a pointer to a valid ChromiumLogLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChromiumLogLevelFromValue(v string) (*ChromiumLogLevel, error) {
	ev := ChromiumLogLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChromiumLogLevel: valid values are %v", v, AllowedChromiumLogLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChromiumLogLevel) IsValid() bool {
	for _, existing := range AllowedChromiumLogLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ChromiumLogLevel value
func (v ChromiumLogLevel) Ptr() *ChromiumLogLevel {
	return &v
}

type NullableChromiumLogLevel struct {
	value *ChromiumLogLevel
	isSet bool
}

func (v NullableChromiumLogLevel) Get() *ChromiumLogLevel {
	return v.value
}

func (v *NullableChromiumLogLevel) Set(val *ChromiumLogLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableChromiumLogLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableChromiumLogLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChromiumLogLevel(val *ChromiumLogLevel) *NullableChromiumLogLevel {
	return &NullableChromiumLogLevel{value: val, isSet: true}
}

func (v NullableChromiumLogLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChromiumLogLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

